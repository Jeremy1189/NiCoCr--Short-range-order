clc;clear;addpath(genpath(pwd));
rng('default')

% close all
%% the trained Machine Learning Model
% load model_NiFeCr_all_ratio.mat model_NiFeCr_all_ratio best_model = model_NiFeCr_all_ratio;
% load NiCoCr_ML_model_nn4.mat NiCoCr_ML_model_nn4
load NiCrCo_best_model.mat best_model
best_model_EBF =best_model;

%% the standard coordinate
load per_input.mat per_input
vacancy_atomID=2221;% center postition
migration_atomID=vacancy_atomID+1; % which could make sure the initial Local Env is same with the trained ML
per_index = per_input(1,:);
per_coords =  per_input(3:5,:);
vac_coord_ini= per_coords(:,vacancy_atomID);
lattice_constant_ini=3.488;
super_size_length=10;
fix_point=10^8;
NN1=12;%fcc 1st nn
NN_ML=4;% 4NN both from migration atom and vacancy
cos_flag=1;% 1 or 2
[vac_ID_nn_set,vac_ID_count_set,~] ...
    = vac_coords_trans(vac_coord_ini',per_coords',per_index,lattice_constant_ini,super_size_length);
cum_vac_IDs=cumsum(vac_ID_count_set);
% nn8_vac_num = cum_vac_IDs(9)-1;%5nn is the 6th number and the 1st is the vacancy
NN=1;
NN1_atomIDs = vac_ID_nn_set(NN+1:vac_ID_count_set(NN+1)+1);
%% tranfer to new coordinate according to the Mig-vac vector

[standard_coords,standard_axis_x,standard_axis_y]= coordinates_transfer(vacancy_atomID,migration_atomID,per_coords,...
    lattice_constant_ini,super_size_length,NN_ML,cos_flag);
axis_x_set=zeros(length(NN1_atomIDs),3);
axis_y_set=zeros(length(NN1_atomIDs),3);
stand_sort_index_set=zeros(length(NN1_atomIDs),length(standard_coords));
%% update the lattice constants of NiFeCr

lattice_constant= 3.556;
ratio=[0.3334,0.3333,0.3333];
Len = lattice_constant*super_size_length;% box length
%% initalization the parameters
per_coords =per_coords./lattice_constant_ini.*lattice_constant;
perfect_coord=per_coords;
per_type=per_input(2,:);%
num_atoms=length(per_coords);
element_type=[1,2,3];%1 Ni, 2 Co,3Cr
L= length( element_type);
num_atoms_all=zeros(L,1);
for i= 2:L
    num_atoms_all(i)= round(num_atoms*ratio(i));
end
num_atoms_all(1)= num_atoms-sum(num_atoms_all); % the number of the remain element
cumsum_set = cumsum(num_atoms_all);
per_type(1:cumsum_set(1))=element_type(1);% Ni%
for j = 2: L
    per_type(  (cumsum_set(j-1)+1) :cumsum_set(j))=element_type(j);
end
rand_index = randperm(num_atoms);
per_type = per_type(rand_index);
perfect_types = per_type;

Ni_index=find(per_type==1);
Co_index=find(per_type==2);
Cr_index=find(per_type==3);


N=length(per_index)-1;
% iteration
iter_times=120e4;% if you want to test, please setting  as 2e4 or 3e4 (possible get the result in several mins on my PC)
%kmc
T_set=[350:100:1350];
Kb= 0.025852/300 ;% ev
D0=1*10^13;%HZ
L_r=size(ratio,1);
% delete(gcp('nocreate'));
% core_number=39;
% parpool('local',core_number);
D_set=cell(length(T_set),1);
R_0=cell(length(T_set),1);
R_t=cell(length(T_set),1);
cos=cell(length(T_set),1);
tracks_set=cell(length(T_set),1);
k_tot_avg_set=cell(length(T_set),1);
count_degree=zeros(length(T_set),5);
NN1_mig_energy_cell=cell(length(T_set),1);
vac_mig_NN1_type_set=cell(length(T_set),1);
mig_index_cell=cell(length(T_set),1);
%         output_FE_set_ratios{num_ratio}=NN1_FE_energy_set;
all_atom_set_cell=cell(length(T_set),1);
per_type_cell=cell(length(T_set),1);
per_set_ratios=cell(length(T_set),1);
Mig_ratios_NN1_ID=cell(length(T_set),1);
SRO_cell=cell(length(T_set),1);
% parfor num_T=1:length(T_set)
 for num_T=1:length(T_set)
    T=T_set(num_T);
    
    %% initialize the vacancy coordinate for each ratio
    vac_ID= vacancy_atomID;
    mig_ID= migration_atomID;
    %% update the lattice constant and coordinates
    
    % lattice constant for current ratio
    per_coords = perfect_coord ;
    per_type=perfect_types;
    
    %% initialize the MSD coordinate
    
    R0=per_coords;
    Rt=per_coords;
    
    %% initialization cell and array
    
    t=0;% inital time
    count0=0;count60=0;count90=0;count120=0;count180=0;
    cos_value_set=zeros(iter_times,1);
    tracks= zeros(iter_times,8); %[t,vac_x,vac_y,Vac_z,MSD]
    NN1_mig_energy_set1 =zeros(iter_times,NN1);%
    NN1_FE_energy_set=zeros(iter_times,NN1);%
    mig_index_set =zeros(iter_times,1);
    K_tot_set_rng=zeros(iter_times,1);
    
    mig_type_set = zeros(iter_times,14);% [mig_type, vac_type, 12 NN1_type]
    cross_boundary_count=zeros(3,length(per_index));
    all_atom_set=zeros(iter_times,4);% the first column is the index, the 2:4 columns are the coordinate of the atoms after migration
    Mig_NN1_ID_set=zeros(iter_times,NN1+1);
    per_set=[per_index;per_type;per_coords]';
    N_sro=1e4;
    SRO_matrix=zeros(1,9);
    %     SRO_matrix=zeros(iter_times/N_sro,9);
    nn_statistic=1;%SRO nn statistic
    count_sro=0;
    for count=1:iter_times
        %% calculating MSD
        
        vac_coord=per_coords(:,vac_ID);% updated the vacancy position
        Dt =Rt-R0;
        if mod(count,1e4)==0
            disp(count)
        end
        %             Dt(index) =Len-Dt(index);
        Dt=Dt+Len.* cross_boundary_count;
        sum_Dt=sum(Dt.^2);%
        sum_Dt(vacancy_atomID)=0;
        MSD =sum(sum_Dt)./N;
        %
        %partitial MSD
        if ~isempty(Co_index)
            sum_Co= sum_Dt(Co_index);
            r_index=find(Co_index==vac_ID);
            sum_Co(r_index)=[];
            current_index=Co_index;
            current_index(r_index)=[];
            MSD_Co=sum(sum_Co)./length(current_index);
        else
            MSD_Co=0;
        end
        if ~isempty(Ni_index)
            sum_Ni= sum_Dt(Ni_index);
            r_index=find(Ni_index==vac_ID);
            sum_Ni(r_index)=[];
            current_index=Ni_index;
            current_index(r_index)=[];
            MSD_Ni =sum(sum_Ni)./length(current_index);
        else
            MSD_Ni=0;
        end
        if ~isempty(Cr_index)
            sum_Cr= sum_Dt(Cr_index);
            r_index=find(Cr_index==vac_ID);
            sum_Cr(r_index)=[];
            current_index=Cr_index;
            current_index(r_index)=[];
            MSD_Cr =sum(sum_Cr)./length(current_index);
        else
            MSD_Cr=0;
        end
        %             tracks(count,:)=[t;vac_coord;MSD]';
        tracks(count,:)=[t;vac_coord;MSD;MSD_Co;MSD_Ni;MSD_Cr]';
        %% match the axis-y to adjust the order of input
        
        [vac_ID_nn_set,~,~,~,~] ...
            = update_vac_nn_kmc(vac_ID,mig_ID,per_coords',lattice_constant,super_size_length);
        
        NN1_ID_set = vac_ID_nn_set(1:NN1);
        Mig_NN1_ID_set(count,:)=[mig_ID,NN1_ID_set'];
        stand_sort_index_set=zeros(length(NN1_atomIDs),length(standard_coords));
        input_atomID_set=zeros(NN1,length(stand_sort_index_set)+1);%1 is mig
        for num_mig_NN1 =1:NN1
            %update mig_ID
            mig_ID = NN1_ID_set(num_mig_NN1);
            vac_mig_vector =( per_coords(:,mig_ID)-per_coords(:,vac_ID));
            norm_vac_mig_vector=vac_mig_vector./norm(vac_mig_vector);
            %match the axis x
            [new_coords,~,~]= coordinates_transfer(vac_ID,mig_ID,per_coords,...
                lattice_constant,super_size_length,NN_ML,cos_flag);
            for num_coords = 1:length(standard_coords)
                sum_diff= sum( abs(repmat(standard_coords(:,num_coords),[1,length(standard_coords)] )- new_coords),1 );
                sum_diff =round(sum_diff.*fix_point)./fix_point;
                index_p= find(sum_diff==0);
                stand_sort_index_set(num_mig_NN1,num_coords)  =index_p;% the sort order for the migration atom during the kMC
            end
            current_vac_mig_order =  stand_sort_index_set(num_mig_NN1,:);
            %update the atom_env
            [~,~,vac_mig_sortID_nn_set,vac_mig_nn_count_set]=update_vac_nn_kmc(vac_ID,mig_ID,per_coords',lattice_constant,super_size_length);
            cum_count =cumsum(vac_mig_nn_count_set);
            NN_vac_mig_atom_ID_set=vac_mig_sortID_nn_set(1: cum_count(NN_ML));
            NN_order_ID_input= NN_vac_mig_atom_ID_set(current_vac_mig_order);
            input_atomID_set(num_mig_NN1,:)=[mig_ID ;NN_order_ID_input]';
        end
        %% predicting the energy by machine learning model
        %%
        %
        %         Mig_IDs=input_atomID_set(:,1);
        %         per=[per_index;per_type;per_coords]';
        %
        
        input_type_set = per_type(input_atomID_set);
        input_equal_position_set= input_type_set;
        X0=dec2bin_alloy3(input_equal_position_set);
        NN1_mig_energy = best_model_EBF(X0');
        %             NN1_F_energy= best_model_FE_NiFeCr(X0');
        %% KMC
        
        %             NN1_FE_energy_set(count,:)= NN1_F_energy;
        NN1_mig_energy_set1(count,:)=NN1_mig_energy;
        K_set= D0.*exp(-(NN1_mig_energy)./(Kb*T));
        K_tot =sum(K_set);
        K_tot_set_rng(count)=K_tot;
        cum_k_set= cumsum(K_set);
        roulette_k_set = cum_k_set./K_tot;
        r1 =rand(1);
        mig_index = find(r1-roulette_k_set <0,1);
        r2 =rand(1);
        t = t + -1/K_tot* log(r2);
        %% update the Rt and vancancy coordinate
        
        NN1_mig_atomID = input_atomID_set(:,1);
        mig_ID =   NN1_mig_atomID(mig_index);
        mig_index_set(count)=mig_index;
        mig_coord = per_coords(:,mig_ID);
        mig_type_set(count,:)= [per_type(vac_ID),per_type(mig_ID),per_type(NN1_mig_atomID)];
        vac_coord = per_coords(:,vac_ID);
        %         Rt(:,mig_ID) =Rt(:,mig_ID)+(vac_coord-mig_coord);
        %% jump record
        
        current_jump_vector=vac_coord-mig_coord;
        index_out_L= find(current_jump_vector>=0.5*Len);
        current_jump_vector(index_out_L)=current_jump_vector(index_out_L)-Len;
        index_out_R= find(current_jump_vector<-0.5*Len);
        current_jump_vector(index_out_R)=current_jump_vector(index_out_R)+Len;
        % statistic cos
        if count==1
            forward_jump_vector=current_jump_vector;
            cos_set = cosd([0,60, 90,120,180]);
        end
        cos_value_set(count) = dot(forward_jump_vector,current_jump_vector)/( norm(forward_jump_vector)*norm(current_jump_vector));
        [min_value,index_set] = min(abs(cos_value_set(count)-cos_set));
        switch index_set
            case 1
                count0=count0+1;
            case 2
                count60=count60+1;
            case 3
                count90=count90+1;
            case 4
                count120=count120+1;
            case 5
                count180=count180+1;
            otherwise
                disp("error index")
        end
        
        forward_jump_vector=current_jump_vector;
        
        % check the periodic bangdaryper
        Rt(:,vac_ID) =  Rt(:,mig_ID);
        Rt(:,mig_ID) =Rt(:,mig_ID)+current_jump_vector;
        Rt_coords=Rt(:, mig_ID);
        index_out_U= find(Rt_coords>Len);
        cross_boundary_count(index_out_U,mig_ID)= cross_boundary_count(index_out_U,mig_ID)+1;
        %             if ~isempty(index_out_U)
        %                 disp(['out_right',num2str(count)]);
        %             end
        Rt_coords(index_out_U)= Rt_coords(index_out_U)-Len;
        
        index_out_L= find(Rt_coords<0);
        cross_boundary_count(index_out_L,mig_ID)= cross_boundary_count(index_out_L,mig_ID)-1;
        %             if ~isempty(index_out_L)
        %                 disp(['out_left',num2str(count)]);
        %             end
        Rt_coords(index_out_L)= Rt_coords(index_out_L)+Len;
        Rt(:, mig_ID)=Rt_coords;
        
        if mod(count-1,N_sro)==0
            crystal_structure=[per_index;per_type;Rt];
            SRO_table=SRO_cal_NiCrCo(crystal_structure,super_size_length,lattice_constant,nn_statistic);
            SRO_set=SRO_cal_NiCrCo(Rt',per_type,lattice_constant,supersize,nn_th_SRO)
            count_sro=count_sro+1;
            SRO_matrix(count_sro,:)=table2array(SRO_table);
        end
        
        %   exchange the coordinate of vacancy and migration atom
        per_coords(:,mig_ID) = vac_coord;
        per_coords(:,vac_ID)= mig_coord;
        per_type(vac_ID)=per_type(mig_ID);
        %         %update vacnacy coordinate
        %         vac_coord=per_coords(:,vac_ID);
        all_atom_set(count,:)=[mig_ID,per_coords(:,mig_ID)'];
    end        % save the
    t_set=tracks(:,1);
    MSD_t=tracks(:,5);
    MSD_Co=tracks(:,6);
    MSD_Ni=tracks(:,7);
    MSD_Cr=tracks(:,8);
    p0= polyfit(t_set, MSD_t,1);
    p1= polyfit(t_set, MSD_Co,1);
    p2= polyfit(t_set, MSD_Ni,1);
    p3= polyfit(t_set, MSD_Cr,1);
    x0=0:max(t_set)/1e3:max(t_set);
    y0= polyval(p0,x0);
    y1= polyval(p1,x0);
    y2= polyval(p2,x0);
    y3= polyval(p3,x0);
    D=p0(1)./6;
    D_Co=p1(1)./6;
    D_Ni=p2(1)./6;
    D_Cr=p3(1)./6;
    Ni_mig_num= length(find(mig_type_set(:,2)==1));
    Co_mig_num= length(find(mig_type_set(:,2)==2));
    Cr_mig_num= length(find(mig_type_set(:,2)==3));
    unit_a=lattice_constant^2/2;
    f_tracer_all= MSD_t(end)/((length(MSD_t)/N) * unit_a);
    if  ~isempty(Co_index)
        r_index=find(Co_index==vac_ID);
        current_index=Co_index;
        current_index(r_index)=[];
        f_tracer_Co= MSD_Co(end)/( Co_mig_num/length(current_index) * unit_a);
    end
    if  ~isempty(Ni_index)
        r_index=find(Ni_index==vac_ID);
        current_index=Ni_index;
        current_index(r_index)=[];
        f_tracer_Ni= MSD_Ni(end)/(Ni_mig_num/length(current_index) * unit_a);
    end
    if  ~isempty(Cr_index)
        r_index=find(Cr_index==vac_ID);
        current_index=Cr_index;
        current_index(r_index)=[];
        f_tracer_Cr= MSD_Cr(end)/(Cr_mig_num/length(current_index) * unit_a);
    end
    
    %         Mig_prob_Co(num_ratio)=Co_mig_num/(Co_mig_num+Ni_mig_num+Cr_mig_num);
    %         Mig_prob_Cr(num_ratio)=Cr_mig_num/(Co_mig_num+Ni_mig_num+Cr_mig_num);
    
    
    %
    %               disp(['The diffusion Rate of Ni {',num2str((ratio(num_ratio,1))),...
    %             '}Co{',num2str(ratio(num_ratio,2)),'}Cr{.',num2str((ratio(num_ratio,3))),...
    %             '} at T=',num2str(T),' is : '])
    %           disp(D(num_ratio).*(1e-20*N))
    %         disp(num2str(D(num_ratio)));
    %%
    vac_mig_NN1_type_set{num_T}=mig_type_set;
    mig_index_cell{num_T}=mig_index_set;
    R_t{num_T}=Rt;
    R_0{num_T}=R0;
    per_type_cell{num_T}=per_type;
    cos{num_T}=cos_value_set;
    tracks_set{num_T}=tracks;
    k_tot_avg_set{num_T}=K_tot_set_rng;
    count_degree(num_T,:)=[count0,count60,count90,count120,count180];
    all_atom_set_cell{num_T}=all_atom_set;
    NN1_mig_energy_cell{num_T}=NN1_mig_energy_set1;
    vac_mig_NN1_type_set{num_T}=mig_type_set;
    mig_index_cell{num_T}=mig_index_set;
    per_coords_set{num_T}=per_coords;
    %         output_Co_set_ratios{num_ratio}=NN1_Co_energy_set;
    all_atom_set_cell{num_T}=all_atom_set;
    per_type_cell{num_T} = per_type;
    per_set_ratios{num_T}=per_set;
    Mig_ratios_NN1_ID{num_T}= Mig_NN1_ID_set;
    D_set{num_T}=D;
    D_set_Ni{num_T}=D_Ni;
    D_set_Co{num_T}=D_Co;
    D_set_Cr{num_T}=D_Cr;
    f_tracer{num_T}=f_tracer_all;
    %         SRO_cell{num_T}=SRO_set;
    f_tracer_Ni_cell{num_T}=f_tracer_Ni;
    f_tracer_Co_cell{num_T}=f_tracer_Co;
    f_tracer_Cr_cell{num_T}=f_tracer_Cr;
    SRO_cell{num_T}=SRO_matrix;
    
end
save (['NiCoCr_ML_random_dif_T.mat'])